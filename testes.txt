1 - (begin (define f (lambda (x) (+ x 10))) (define result (f (car '(50 34 567 433 22 23 2345 "ok" (6 87 6))))) result)

2- (begin (it? (50 50)))

3 - (begin (let (i 0)(define f (lambda (y)(i+y))))(define val1 (f 1))(define val2 (f 1))(+ val1 val2))

4 - (begin(    (define (fib n)        (if             (< n 2)  (n)            (             (+ (fib(- n 1))           (fib (- n 2))))))))

5 - (begin   
  (let ((i 1))
    (define f 
      (make-closure 
        (lambda (y) 
          (begin (set! i (+ i y)) i) 
        )
      )
    )
  )
  (define val1 (f 1))
  (define val2 (f 1))
  (+ val1 val2) 
)

6 - (begin (mod (50 2)))



(begin(let ((i 1)((define f (lambda (y) (y+i)))))))

(begin (let (i 0) (e 2)))


"(begin (define fib (lambda (n) (if (lt? n 2) (n) (+ (fib (- n 1)) (fib (- n 2)))))) (define y (fib 7)) y)"


"(begin (define fact (lambda (n) (if (eq? n 0) (1) (* n (fact (- n 1)))))) (define e (fact 8)) e)"


(begin (if (< 3 2) (+ 1 3) (+ 1 5)))



(begin(
    (define (fib n)
        (cond 
            ((< n 2) n)
            (else
                (+ (fib(- n 1))
                (fib(- n 2))))))
))



7 - (begin (define pivo (lambda (l)
  	   (if (eq? l '()) ('feito)
		        (if (eq? (cdr l) '()) ('feito)
	             (if (lt? (car l) (car (cdr l))) (pivo (cdr l))
		              ((car l))))
                )
            )
        )
      )
		
          (define particao (lambda (piv l p1 p2)
            (if (eq? l '()) (list p1 p2)
               (if (lt? (car l) piv) (particao piv (cdr l) (cons (car l) p1) p2)
          	   (particao piv (cdr l) p1 (cons (car l) p2))))))

          (define (quicksort l)
           (let ((piv (pivo l)))
             (if (eq? piv 'feito) l
               (let ((parts (particao piv l () ())))
                 (append (quicksort (car parts)) 
                         (quicksort (car (cdr parts)))))))
      )

8 - 

"(begin (define x 3) (define y 0) (let ((x 2) (e 4)) (begin (set! y (+ x 20)))) y)"
"(begin (define x 3) (define y 0) (let ((x 2) (e 4)) (begin (set! x 8) (set! y (+ x 20)))) y)"

